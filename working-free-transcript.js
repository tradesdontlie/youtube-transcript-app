// Working Free YouTube Transcript Extractor
async function getYouTubeTranscript(videoId) {
  try {
    console.log(`Fetching transcript for video: ${videoId}`);
    
    // Step 1: Get the video page HTML
    const response = await fetch(`https://www.youtube.com/watch?v=${videoId}`, {
      headers: {
        'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
        'Accept-Language': 'en-US,en;q=0.5',
        'Accept-Encoding': 'gzip, deflate',
        'Connection': 'keep-alive'
      }
    });
    
    const html = await response.text();
    
    // Step 2: Extract player response
    const playerResponseMatch = html.match(/ytInitialPlayerResponse\s*=\s*({.+?})\s*;/);
    if (!playerResponseMatch) {
      throw new Error('Could not find player response');
    }
    
    const playerResponse = JSON.parse(playerResponseMatch[1]);
    
    // Step 3: Extract captions info
    const captions = playerResponse.captions?.playerCaptionsTracklistRenderer;
    if (!captions || !captions.captionTracks || captions.captionTracks.length === 0) {
      throw new Error('No captions available for this video');
    }
    
    // Step 4: Get the best caption track (prefer manual over auto-generated)
    const captionTracks = captions.captionTracks;
    
    // Sort by preference: manual first, then auto-generated
    const sortedTracks = captionTracks.sort((a, b) => {
      // Prefer English
      if (a.languageCode === 'en' && b.languageCode !== 'en') return -1;
      if (a.languageCode !== 'en' && b.languageCode === 'en') return 1;
      
      // Prefer manual over auto-generated
      const aIsAuto = a.vssId?.includes('a.') || a.kind === 'asr';
      const bIsAuto = b.vssId?.includes('a.') || b.kind === 'asr';
      
      if (!aIsAuto && bIsAuto) return -1;
      if (aIsAuto && !bIsAuto) return 1;
      
      return 0;
    });
    
    const selectedTrack = sortedTracks[0];
    console.log(`Selected caption track: ${selectedTrack.name?.simpleText || selectedTrack.languageCode}`);
    
    // Step 5: Fetch the actual transcript
    const transcriptUrl = selectedTrack.baseUrl + '&fmt=json3';
    const transcriptResponse = await fetch(transcriptUrl);
    const transcriptData = await transcriptResponse.json();
    
    // Step 6: Parse and format the transcript
    if (!transcriptData.events) {
      throw new Error('No transcript events found');
    }
    
    const transcript = transcriptData.events
      .filter(event => event.segs) // Only events with text segments
      .map(event => ({
        text: event.segs.map(seg => seg.utf8).join(' '),
        start: event.tStartMs / 1000, // Convert to seconds
        duration: event.dDurationMs / 1000 // Convert to seconds
      }))
      .filter(segment => segment.text.trim()) // Remove empty segments
      .map(segment => ({
        ...segment,
        text: segment.text.replace(/\n/g, ' ').trim() // Clean up text
      }));
    
    console.log(`✅ Successfully extracted ${transcript.length} transcript segments`);
    
    return {
      videoId,
      language: selectedTrack.languageCode,
      languageName: selectedTrack.name?.simpleText || selectedTrack.languageCode,
      isAutoGenerated: selectedTrack.vssId?.includes('a.') || selectedTrack.kind === 'asr',
      transcript
    };
    
  } catch (error) {
    console.error(`❌ Failed to get transcript for ${videoId}:`, error.message);
    throw error;
  }
}

// Test the function
async function testTranscriptExtraction() {
  const testVideos = [
    'dQw4w9WgXcQ', // Rick Roll
    'kJQP7kiw5Fk', // Despacito
    'YQHsXMglC9A', // Adele - Hello
    'fJ9rUzIMcZQ', // Queen - Bohemian Rhapsody
  ];
  
  for (const videoId of testVideos) {
    try {
      console.log(`\n${'='.repeat(50)}`);
      console.log(`Testing: ${videoId}`);
      console.log(`${'='.repeat(50)}`);
      
      const result = await getYouTubeTranscript(videoId);
      
      console.log(`Video ID: ${result.videoId}`);
      console.log(`Language: ${result.languageName} (${result.language})`);
      console.log(`Auto-generated: ${result.isAutoGenerated}`);
      console.log(`Transcript segments: ${result.transcript.length}`);
      
      if (result.transcript.length > 0) {
        console.log('\nFirst 3 segments:');
        result.transcript.slice(0, 3).forEach((segment, index) => {
          console.log(`${index + 1}. [${segment.start.toFixed(1)}s] ${segment.text}`);
        });
        
        console.log('\n🎉 SUCCESS! Found working transcript.');
        break; // Stop after first success
      }
      
    } catch (error) {
      console.log(`Failed: ${error.message}`);
    }
    
    // Wait between requests to be respectful
    await new Promise(resolve => setTimeout(resolve, 1000));
  }
}

// Export the function for use in your app
if (typeof module !== 'undefined' && module.exports) {
  module.exports = { getYouTubeTranscript };
}

// Run test if this file is executed directly
if (typeof require !== 'undefined' && require.main === module) {
  testTranscriptExtraction().catch(console.error);
} 